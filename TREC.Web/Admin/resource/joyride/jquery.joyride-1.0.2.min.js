(function (a) { a.fn.joyride = function (b) { var c = { tipLocation: "bottom", scrollSpeed: 300, timer: 0, startTimerOnClick: false, nextButton: true, tipAnimation: "pop", tipAnimationFadeSpeed: 300, cookieMonster: false, cookieName: "JoyRide", cookieDomain: false, tipContainer: "body", inline: false, tipContent: "#joyRideTipContent", postRideCallback: null }; var b = a.extend(c, b); return this.each(function () { if (a(b.tipContent).length === 0) { return } a(b.tipContent).hide(); var k = a(b.tipContainer).children("*").first().position(), h = a(b.tipContent + " li"), l = skipCount = 0, i = -1, g, j = '<div class="joyride-timer-indicator-wrap"><span class="joyride-timer-indicator"></span></div>', n = function (q, p, r, o) { return '<div class="joyride-tip-guide ' + q + '" id="joyRidePopup' + p + '"><span class="joyride-nub"></span>' + a(o).html() + r + '<a href="#close" class="joyride-close-tip">X</a>' + g + "</div>" }, m = function (q, p, r, o) { if (p == 0 && c.startTimerOnClick && c.timer > 0 || c.timer == 0) { g = "" } else { g = j } if (!q) { q = "" } (r != "") ? r = '<a href="#" class="joyride-next-tip small nice radius yellow button">' + r + "</a>" : r = ""; if (c.inline) { a(n(q, p, r, o)).insertAfter("#" + a(o).data("id")) } else { a(b.tipContainer).append(n(q, p, r, o)) } }; if (!c.cookieMonster || !a.cookie(c.cookieName)) { h.each(function (q) { var r = a(this).data("text"), p = a(this).attr("class"), o = this; if (c.nextButton && r == undefined) { r = "Next" } if (c.nextButton || !c.nextButton && c.startTimerOnClick) { if (a(this).attr("class")) { m(p, q, r, o) } else { m(false, q, r, o) } } else { if (!c.nextButton) { if (a(this).attr("class")) { m(p, q, "", o) } else { m(false, q, "", o) } } } a("#joyRidePopup" + q).hide() }) } showNextTip = function () { var u = a(h[l]).data("id"), x = a("#" + u); while (x.offset() === null) { l++; skipCount++; i++; u = a(h[l]).data("id"), x = a("#" + u); if (a(h).length < l) { break } } var t = Math.ceil(a(window).height() / 2), q = a("#joyRidePopup" + l), w = x.offset(), o = x.outerHeight(), v = q.outerHeight(), r = Math.ceil(a(".joyride-nub").outerHeight() / 2), p = 0; if (q.length === 0) { return } if (l < h.length) { if (c.tipAnimation == "pop") { a(".joyride-timer-indicator").width(0); if (c.timer > 0) { q.show().children(".joyride-timer-indicator-wrap").children(".joyride-timer-indicator").animate({ width: a(".joyride-timer-indicator-wrap").width() }, c.timer) } else { q.show() } } else { if (c.tipAnimation == "fade") { a(".joyride-timer-indicator").width(0); if (c.timer > 0) { q.fadeIn(c.tipAnimationFadeSpeed).children(".joyride-timer-indicator-wrap").children(".joyride-timer-indicator").animate({ width: a(".joyride-timer-indicator-wrap").width() }, c.timer) } else { q.fadeIn(c.tipAnimationFadeSpeed) } } } if (c.tipLocation == "bottom") { q.offset({ top: (w.top + o + r), left: (w.left - k.left) }); q.children(".joyride-nub").addClass("top").removeClass("bottom") } else { if (c.tipLocation == "top") { if (v >= w.top) { q.offset({ top: ((w.top + o + r) - k.top), left: (w.left - k.left) }); q.children(".joyride-nub").addClass("top").removeClass("bottom") } else { q.offset({ top: ((w.top) - (v + k.top + r)), left: (w.left - k.left) }); q.children(".joyride-nub").addClass("bottom").removeClass("top") } } } p = Math.ceil(q.offset().top - t); a("html, body").animate({ scrollTop: p }, c.scrollSpeed); if (l > 0) { if (skipCount > 0) { var s = i - skipCount; skipCount = 0 } else { var s = i } if (c.tipAnimation == "pop") { a("#joyRidePopup" + s).hide() } else { if (c.tipAnimation == "fade") { a("#joyRidePopup" + s).fadeOut(c.tipAnimationFadeSpeed) } } } } else { if ((h.length - 1) < l) { if (skipCount > 0) { var s = i - skipCount; skipCount = 0 } else { var s = i } if (c.cookieMonster == true) { a.cookie(c.cookieName, "ridden", { expires: 365, domain: c.cookieDomain }) } else { } if (c.tipAnimation == "pop") { a("#joyRidePopup" + s).fadeTo(0, 0) } else { if (c.tipAnimation == "fade") { a("#joyRidePopup" + s).fadeTo(c.tipAnimationFadeSpeed, 0) } } } } l++; if (i < 0) { i = 0 } else { i++ } }; if (!c.inline || !c.cookieMonster || !a.cookie(c.cookieName)) { a(window).resize(function () { var s = a(h[i]).data("id"), p = a("#" + s).offset(), q = a("#" + s).outerHeight(), r = a("#joyRidePopup" + i).outerHeight(), o = Math.ceil(a(".joyride-nub").outerHeight() / 2); if (c.tipLocation == "bottom") { a("#joyRidePopup" + i).offset({ top: (p.top + q + o), left: p.left }) } else { if (c.tipLocation == "top") { if (p.top <= r) { a("#joyRidePopup" + i).offset({ top: (p.top + o + q), left: p.left }) } else { a("#joyRidePopup" + i).offset({ top: ((p.top) - (r + o)), left: p.left }) } } } }) } var e = null, d = false; if (!c.startTimerOnClick && c.timer > 0) { showNextTip(); e = setInterval(function () { showNextTip() }, c.timer) } else { showNextTip() } var f = function (q, r, p, o) { q.preventDefault(); clearInterval(r); if (p) { a.cookie(c.cookieName, "ridden", { expires: 365, domain: c.cookieDomain }) } a(o).parent().hide(); if (c.postRideCallback != null) { c.postRideCallback() } }; a(".joyride-close-tip").click(function (o) { f(o, e, c.cookieMonster, this) }); a(".joyride-next-tip").click(function (o) { o.preventDefault(); if (l >= h.length) { f(o, e, c.cookieMonster, this) } if (c.timer > 0 && c.startTimerOnClick) { showNextTip(); clearInterval(e); e = setInterval(function () { showNextTip() }, c.timer) } else { if (c.timer > 0 && !c.startTimerOnClick) { clearInterval(e); e = setInterval(function () { showNextTip() }, c.timer) } else { showNextTip() } } }) }) }; jQuery.cookie = function (e, f, c) { if (arguments.length > 1 && String(f) !== "[object Object]") { c = jQuery.extend({}, c); if (f === null || f === undefined) { c.expires = -1 } if (typeof c.expires === "number") { var h = c.expires, d = c.expires = new Date(); d.setDate(d.getDate() + h) } f = String(f); return (document.cookie = [encodeURIComponent(e), "=", c.raw ? f : encodeURIComponent(f), c.expires ? "; expires=" + c.expires.toUTCString() : "", c.path ? "; path=" + c.path : "", c.domain ? "; domain=" + c.domain : "", c.secure ? "; secure" : ""].join("")) } c = f || {}; var b, g = c.raw ? function (i) { return i } : decodeURIComponent; return (b = new RegExp("(?:^|; )" + encodeURIComponent(e) + "=([^;]*)").exec(document.cookie)) ? g(b[1]) : null } })(jQuery);